public class Demo {
    public static void main(String[] args) {
        final Object lock = new Object();

        Thread sleepThread = new Thread(() -> {
            synchronized (lock) {
                try {
                    System.out.println("SleepThread: Acquired lock and sleeping for 3 seconds");
                    Thread.sleep(3000); // Sleep for 3 seconds
                    System.out.println("SleepThread: Woke up after 3 seconds");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread waitThread = new Thread(() -> {
            synchronized (lock) {
                try {
                    System.out.println("WaitThread: Acquired lock and waiting...");
                    lock.wait(); // Waiting until notified
                    System.out.println("WaitThread: Resumed");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        sleepThread.start();

        // Let the sleepThread acquire the lock first
        try {
            Thread.sleep(1000); // Sleep for 1 second
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        waitThread.start();

        // Let the threads run for some time
        try {
            Thread.sleep(5000); // Sleep for 5 seconds
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Notify the waitThread after 5 seconds
        synchronized (lock) {
            lock.notify(); // Notifies the waitThread to resume
        }
    }
}
